{"version":3,"file":"index.js","sources":["../../src/preload.ts"],"sourcesContent":["import { contextBridge, ipcRenderer, clipboard } from 'electron';\r\n\r\ncontextBridge.exposeInMainWorld('app', {\r\n  name: 'Electron Notepad'\r\n});\r\n\r\ncontextBridge.exposeInMainWorld('electronAPI', {\r\n  minimizeWindow: () => ipcRenderer.invoke('window:minimize'),\r\n  toggleMaximizeWindow: () => ipcRenderer.invoke('window:toggle-maximize'),\r\n  closeWindow: () => ipcRenderer.invoke('window:close'),\r\n  reload: () => ipcRenderer.invoke('window:reload'),\r\n  forceReload: () => ipcRenderer.invoke('window:force-reload'),\r\n  toggleDevTools: () => ipcRenderer.invoke('window:toggle-devtools'),\r\n  isDevToolsOpen: () => ipcRenderer.invoke('window:is-devtools-open') as Promise<boolean>,\r\n  onDevToolsStateChanged: (callback: (open: boolean) => void) => {\r\n    const listener = (_event: Electron.IpcRendererEvent, open: boolean) => callback(open);\r\n    ipcRenderer.on('devtools-state-changed', listener);\r\n    return () => ipcRenderer.removeListener('devtools-state-changed', listener);\r\n  },\r\n  toggleFullscreen: () => ipcRenderer.invoke('window:toggle-fullscreen'),\r\n  zoomReset: () => ipcRenderer.invoke('window:zoom-reset'),\r\n  zoomIn: () => ipcRenderer.invoke('window:zoom-in'),\r\n  zoomOut: () => ipcRenderer.invoke('window:zoom-out'),\r\n  getZoomLevel: () => ipcRenderer.invoke('window:get-zoom-level') as Promise<number>,\r\n  onZoomChanged: (callback: (zoomFactor: number) => void) => {\r\n    const listener = (_event: Electron.IpcRendererEvent, zoomFactor: number) => callback(zoomFactor);\r\n    ipcRenderer.on('zoom-changed', listener);\r\n    return () => ipcRenderer.removeListener('zoom-changed', listener);\r\n  },\r\n  openFile: () => ipcRenderer.invoke('file:open'),\r\n  saveFile: (args: { path?: string; content: string }) => ipcRenderer.invoke('file:save', args),\r\n  saveFileAs: (args: { content: string }) => ipcRenderer.invoke('file:save-as', args)\r\n  ,\r\n  readClipboardText: () => Promise.resolve(clipboard.readText()),\r\n  writeClipboardText: (text: string) => Promise.resolve(clipboard.writeText(text))\r\n});\r\n\r\nexport {};\r\n\r\n\r\n"],"names":["contextBridge","ipcRenderer","callback","listener","_event","open","zoomFactor","args","clipboard","text"],"mappings":"yCAEAA,EAAAA,cAAc,kBAAkB,MAAO,CACrC,KAAM,kBACR,CAAC,EAEDA,EAAAA,cAAc,kBAAkB,cAAe,CAC7C,eAAgB,IAAMC,EAAAA,YAAY,OAAO,iBAAiB,EAC1D,qBAAsB,IAAMA,EAAAA,YAAY,OAAO,wBAAwB,EACvE,YAAa,IAAMA,EAAAA,YAAY,OAAO,cAAc,EACpD,OAAQ,IAAMA,EAAAA,YAAY,OAAO,eAAe,EAChD,YAAa,IAAMA,EAAAA,YAAY,OAAO,qBAAqB,EAC3D,eAAgB,IAAMA,EAAAA,YAAY,OAAO,wBAAwB,EACjE,eAAgB,IAAMA,EAAAA,YAAY,OAAO,yBAAyB,EAClE,uBAAyBC,GAAsC,CAC7D,MAAMC,EAAW,CAACC,EAAmCC,IAAkBH,EAASG,CAAI,EACpFJ,OAAAA,cAAY,GAAG,yBAA0BE,CAAQ,EAC1C,IAAMF,EAAAA,YAAY,eAAe,yBAA0BE,CAAQ,CAC5E,EACA,iBAAkB,IAAMF,EAAAA,YAAY,OAAO,0BAA0B,EACrE,UAAW,IAAMA,EAAAA,YAAY,OAAO,mBAAmB,EACvD,OAAQ,IAAMA,EAAAA,YAAY,OAAO,gBAAgB,EACjD,QAAS,IAAMA,EAAAA,YAAY,OAAO,iBAAiB,EACnD,aAAc,IAAMA,EAAAA,YAAY,OAAO,uBAAuB,EAC9D,cAAgBC,GAA2C,CACzD,MAAMC,EAAW,CAACC,EAAmCE,IAAuBJ,EAASI,CAAU,EAC/FL,OAAAA,cAAY,GAAG,eAAgBE,CAAQ,EAChC,IAAMF,EAAAA,YAAY,eAAe,eAAgBE,CAAQ,CAClE,EACA,SAAU,IAAMF,EAAAA,YAAY,OAAO,WAAW,EAC9C,SAAWM,GAA6CN,EAAAA,YAAY,OAAO,YAAaM,CAAI,EAC5F,WAAaA,GAA8BN,EAAAA,YAAY,OAAO,eAAgBM,CAAI,EAElF,kBAAmB,IAAM,QAAQ,QAAQC,EAAAA,UAAU,UAAU,EAC7D,mBAAqBC,GAAiB,QAAQ,QAAQD,EAAAA,UAAU,UAAUC,CAAI,CAAC,CACjF,CAAC"}